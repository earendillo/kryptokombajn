{"version":3,"sources":["components/StochValueContainer.tsx","components/LoadingIndicator.tsx","App.tsx","index.tsx"],"names":["StochValueContainer","props","pair","symbol","split","join","pairUrl","className","href","target","stochData","map","stochValue","value","parseFloat","key","Math","random","style","calculateBgColor","toFixed","volume","backgroundColor","LoadingIndicator","App","symbolsUSDT","pairSymbols","useState","symbols","setSymbols","cryptoData","setCryptoData","isLoading","setLoadingStatus","useEffect","axios","get","then","response","data","filter","status","quoteAsset","obj","trim","length","forEach","a","all","getKlines","last24hKline","cryptoDataForSymbol","stochs","calculateStoch","calculateVolume","oldArray","interval","params","limit","kline","openTime","price","open","high","low","close","closeTime","quoteAssetVolume","numberOfTrades","klineData","lastPrice","maxPrice","sort","compareNumbers","minPrice","b","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6fedc85.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './StochValueContainer.scss';\r\nimport axios from \"axios\";\r\nimport { Kline } from \"../interfaces/interfaces\";\r\n\r\ninterface StochValueContainerProps {\r\n    symbol: string;\r\n    stochData: Array<string>;\r\n    volume: string;\r\n}\r\n\r\n// interface Kline {\r\n//     openTime: number;\r\n//     price: Price;\r\n//     volume: string;\r\n//     closeTime: number;\r\n//     quoteAssetVolume: string;\r\n//     numberOfTrades: number;\r\n// }\r\n//\r\n// interface Price {\r\n//     open: string;\r\n//     high: string;\r\n//     low: string;\r\n//     close: string;\r\n// }\r\n\r\nexport function StochValueContainer(props: StochValueContainerProps) {\r\n    // const [countedStochs, setCountedStochs] = useState([]);\r\n    // const [volume, setVolume] = useState('')\r\n    //\r\n    // useEffect(() => {\r\n    //     const getKlines1h: Promise<Array<Kline>> = getKlines(props.pairSymbol, \"1h\");\r\n    //     const getKlines4h: Promise<Array<Kline>> = getKlines(props.pairSymbol, \"4h\");\r\n    //     const getKlines1d: Promise<Array<Kline>> = getKlines(props.pairSymbol, \"1d\");\r\n    //     axios.all([getKlines1h, getKlines4h, getKlines1d]).then(\r\n    //         axios.spread((...allData: Array<Array<Kline>>) => {\r\n    //             const countedStochs = allData.map(dataArray => calculateStoch(dataArray));\r\n    //             const dayRecord = allData[2];\r\n    //             const lastDayData = dayRecord[dayRecord.length - 1];\r\n    //             const coinVolume: number = parseFloat(lastDayData.volume);\r\n    //             const lastDayAveragePrice = (parseFloat(lastDayData.price.high) + parseFloat(lastDayData.price.low))/2;\r\n    //             const volume = (coinVolume * lastDayAveragePrice / 1000000).toFixed(2);\r\n    //             return {\r\n    //                 symbol: props.pairSymbol,\r\n    //                 countedStochs,\r\n    //                 volume1d: volume\r\n    //             }\r\n    //         })\r\n    //     ).then((data) => {\r\n    //         setCountedStochs(data.countedStochs as any)\r\n    //         setVolume(data.volume1d as any)\r\n    //     })\r\n    //\r\n    //     function calculateStoch(last14records: Array<Kline>): number {\r\n    //         console.log(last14records);\r\n    //         const lastPrice = parseFloat(last14records[last14records.length-1].price.close);\r\n    //         const maxPrice = last14records.map((kline: Kline) => parseFloat(kline.price.high)).sort(compareNumbers)[last14records.length-1];\r\n    //         const minPrice = last14records.map((kline: Kline) => parseFloat(kline.price.low)).sort(compareNumbers)[0];\r\n    //         console.log(lastPrice, maxPrice, minPrice);\r\n    //         return 100*(lastPrice - minPrice)/(maxPrice - minPrice);\r\n    //     }\r\n    // }, [props.pairSymbol])\r\n    //\r\n    const pair = props.symbol.split('USDT').join('_USDT');\r\n    const pairUrl = `https://www.binance.com/en/trade/${pair}`\r\n\r\n    return (\r\n        <div className='stoch-value-container'>\r\n            <span className='pair-symbol'><a href={pairUrl} target='_blank'>{props.symbol}</a></span>\r\n            {props.stochData.map(stochValue => {\r\n                const value = parseFloat(stochValue);\r\n                return (\r\n                    <span\r\n                        key={Math.random()*10}\r\n                        className='stoch-value'\r\n                        style={calculateBgColor(value)}\r\n                    >\r\n                            {value.toFixed(2)}\r\n                        </span>\r\n                )\r\n            })}\r\n            <span className='stoch-value'>{props.volume}</span>\r\n        </div>\r\n    );\r\n\r\n    // function getKlines(symbol: string, interval: string) {\r\n    //     return axios.get('https://api.binance.com/api/v3/klines', {\r\n    //         params: {\r\n    //             symbol,\r\n    //             interval,\r\n    //             limit: 14\r\n    //         }\r\n    //     }).then((response: any) => {\r\n    //         const klines: Array<Kline> = response.data.map((kline: Array<any>) => {\r\n    //             return {\r\n    //                 openTime: kline[0],\r\n    //                 price: {\r\n    //                     open: kline[1],\r\n    //                     high: kline[2],\r\n    //                     low: kline[3],\r\n    //                     close: kline[4]\r\n    //                 },\r\n    //                 volume: kline[5],\r\n    //                 closeTime: kline[6],\r\n    //                 quoteAssetVolume: kline[7],\r\n    //                 numberOfTrades: kline[8]\r\n    //             }\r\n    //         })\r\n    //         return klines;\r\n    //     })\r\n    // }\r\n\r\n    function calculateBgColor(value: number): any {\r\n        return { backgroundColor: value <= 20 ? `rgba(0,255,0,${1 - 3*value/100})` : 'inherit' }\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport './LoadingIndicator.scss'\r\n\r\nexport function LoadingIndicator(): JSX.Element {\r\n    return <div className=\"lds-roller\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport './App.scss';\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport { StochValueContainer } from './components/StochValueContainer';\r\nimport { LoadingIndicator } from \"./components/LoadingIndicator\";\r\nimport { Kline } from \"./interfaces/interfaces\";\r\n\r\ninterface CryptoData {\r\n    symbol: string;\r\n    stochs: Array<string>;\r\n    volume: any;\r\n}\r\n\r\nfunction App() {\r\n    const [symbols, setSymbols] = useState([]);\r\n    const [cryptoData, setCryptoData] = useState<Array<CryptoData>>([]);\r\n    const [isLoading, setLoadingStatus] = useState<boolean>(false);\r\n    let symbolsUSDT;\r\n    let symbolsBUSD;\r\n    let testData: any = [];\r\n    let pairSymbols;\r\n\r\n    useEffect(() => {\r\n        axios.get('https://api.binance.com/api/v1/exchangeInfo').then(response => {\r\n            const symbols = response.data.symbols.filter((symbol: any) => symbol.status === 'TRADING');\r\n            symbolsUSDT = symbols.filter((symbol: any) => symbol.quoteAsset === 'USDT');\r\n            symbolsBUSD = symbols.filter((symbol: any) => symbol.quoteAsset === 'BUSD');\r\n            pairSymbols = symbolsUSDT.map((obj: any) => obj.symbol.trim());\r\n            setSymbols(pairSymbols as any);\r\n            setLoadingStatus(true);\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (symbols?.length) {\r\n            symbols.forEach(async (symbol) => {\r\n                const data: Array<Array<Kline>> = await axios.all([getKlines(symbol, '1h'), getKlines(symbol, '4h'), getKlines(symbol, '1d')]) as any;\r\n                const last24hKline: Kline = data[2][data[2].length - 1];\r\n                const cryptoDataForSymbol: CryptoData = {\r\n                    symbol,\r\n                    stochs: data.map(calculateStoch),\r\n                    volume: calculateVolume(last24hKline)\r\n                }\r\n                setCryptoData((oldArray) => [...oldArray, cryptoDataForSymbol])\r\n            })\r\n        }\r\n    }, [symbols])\r\n\r\n    useEffect(() => {\r\n        if (symbols.length === cryptoData.length) {\r\n            setLoadingStatus(false);\r\n        }\r\n    }, [cryptoData, symbols])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h2>Stoch index for 1h, 4h, 1d periods</h2>\r\n\r\n            <div className='table-container'>\r\n                <div className='stoch-value-container header'>\r\n                    <span className='pair-symbol'>Pair symbol</span>\r\n                    <span className='stoch-value'>Stoch 1h</span>\r\n                    <span className='stoch-value'>Stoch 4h</span>\r\n                    <span className='stoch-value'>Stoch 1d</span>\r\n                    <span className='stoch-value'>Volume, M USDT</span>\r\n                </div>\r\n                { !isLoading && cryptoData.length && cryptoData.length === symbols.length ? renderCryptoData() : <LoadingIndicator/> }\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    function renderCryptoData() {\r\n        return cryptoData.map((data) => {\r\n            return <StochValueContainer symbol={data.symbol} stochData={data.stochs} volume={data.volume} />\r\n        })\r\n    }\r\n\r\n    // function renderStochData(stochData) {\r\n    //     return <div>\r\n    //         {stochData.map(stochValue => {\r\n    //             return <span className='pair-symbol' key={Math.random()*stochValue}>{stochValue}</span>\r\n    //         })}\r\n    //     </div>\r\n    // }\r\n\r\n    function getKlines(symbol: string, interval: string) {\r\n        return axios.get('https://api.binance.com/api/v3/klines', {\r\n            params: {\r\n                symbol,\r\n                interval,\r\n                limit: 14\r\n            }\r\n        }).then((response: any) => {\r\n            const klines: Array<Kline> = response.data.map((kline: Array<any>) => {\r\n                return {\r\n                    openTime: kline[0],\r\n                    price: {\r\n                        open: kline[1],\r\n                        high: kline[2],\r\n                        low: kline[3],\r\n                        close: kline[4]\r\n                    },\r\n                    volume: kline[5],\r\n                    closeTime: kline[6],\r\n                    quoteAssetVolume: kline[7],\r\n                    numberOfTrades: kline[8]\r\n                }\r\n            })\r\n            return klines;\r\n        })\r\n    }\r\n\r\n    function calculateStoch(klineData: Array<Kline>): string {\r\n        const lastPrice = parseFloat(klineData[klineData.length - 1].price.close);\r\n        const maxPrice = klineData.map((kline: Kline) => parseFloat(kline.price.high)).sort(compareNumbers)[klineData.length - 1];\r\n        const minPrice = klineData.map((kline: Kline) => parseFloat(kline.price.low)).sort(compareNumbers)[0];\r\n        return (100 * (lastPrice - minPrice) / (maxPrice - minPrice)).toFixed(2);\r\n    }\r\n\r\n    function calculateVolume(kline: Kline): string {\r\n        const coinVolume: number = parseFloat(kline.volume);\r\n        const klineAveragePrice = (parseFloat(kline.price.high) + parseFloat(kline.price.low))/2;\r\n        return (coinVolume * klineAveragePrice / 1000000).toFixed(2);\r\n    }\r\n\r\n    function calculateBgColor(value: number): any {\r\n        return {backgroundColor: value <= 20 ? `rgba(0,255,0,${1 - 3 * value / 100})` : 'inherit'}\r\n    }\r\n\r\n    function compareNumbers(a: number, b: number): number {\r\n        return a - b;\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}